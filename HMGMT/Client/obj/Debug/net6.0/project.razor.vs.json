{"SerializedFilePath":"D:\\HMGMT\\HMGMT\\Client\\obj\\Debug\\net6.0\\project.razor.vs.json","FilePath":"D:\\HMGMT\\HMGMT\\Client\\HMGMT.Client.csproj","Configuration":{"ConfigurationName":"Default","LanguageVersion":"6.0","Extensions":[]},"ProjectWorkspaceState":{"TagHelpers":[{"HashCode":164585999,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.BoilerData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BoilerData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.BoilerData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"BoilerData"}},{"HashCode":412976667,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.BoilerData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Pages.BoilerData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.BoilerData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"BoilerData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-854308258,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.ThermostatData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ThermostatData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.ThermostatData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"ThermostatData"}},{"HashCode":-1206647088,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.ThermostatData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Pages.ThermostatData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.ThermostatData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"ThermostatData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1791300563,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.Index","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.Index","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"Index"}},{"HashCode":1609172505,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.Index","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Pages.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.Index","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1396165180,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.MixerData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MixerData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MixerId","TypeName":"System.String","Metadata":{"Common.PropertyName":"MixerId","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.MixerData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"MixerData"}},{"HashCode":667966092,"Kind":"Components.Component","Name":"HMGMT.Client.Pages.MixerData","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Pages.MixerData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MixerId","TypeName":"System.String","Metadata":{"Common.PropertyName":"MixerId","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Pages.MixerData","Common.TypeNamespace":"HMGMT.Client.Pages","Common.TypeNameIdentifier":"MixerData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-115891083,"Kind":"Components.Component","Name":"HMGMT.Client.Components.MoreButtonGroup","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MoreButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.MoreButtonGroup","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"MoreButtonGroup"}},{"HashCode":-682183141,"Kind":"Components.Component","Name":"HMGMT.Client.Components.MoreButtonGroup","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Components.MoreButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.MoreButtonGroup","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"MoreButtonGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-239837774,"Kind":"Components.Component","Name":"HMGMT.Client.Components.SwipeCard","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SwipeCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.SwipeCard","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"SwipeCard"}},{"HashCode":1410938329,"Kind":"Components.Component","Name":"HMGMT.Client.Components.SwipeCard","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Components.SwipeCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.SwipeCard","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"SwipeCard","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2042477057,"Kind":"Components.Component","Name":"HMGMT.Client.Components.MainCard","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DeviceTemp","TypeName":"System.String","Metadata":{"Common.PropertyName":"DeviceTemp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconSource","TypeName":"System.String","Metadata":{"Common.PropertyName":"IconSource","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconWidth","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"IconWidth","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"UpMethod","TypeName":"System.Action","Metadata":{"Common.PropertyName":"UpMethod","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"DownMethod","TypeName":"System.Action","Metadata":{"Common.PropertyName":"DownMethod","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.MainCard","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"MainCard"}},{"HashCode":-721017709,"Kind":"Components.Component","Name":"HMGMT.Client.Components.MainCard","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Components.MainCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DeviceTemp","TypeName":"System.String","Metadata":{"Common.PropertyName":"DeviceTemp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconSource","TypeName":"System.String","Metadata":{"Common.PropertyName":"IconSource","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconWidth","TypeName":"System.Int32?","Metadata":{"Common.PropertyName":"IconWidth","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"NavToDetails","TypeName":"System.Action","Metadata":{"Common.PropertyName":"NavToDetails","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"UpMethod","TypeName":"System.Action","Metadata":{"Common.PropertyName":"UpMethod","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"DownMethod","TypeName":"System.Action","Metadata":{"Common.PropertyName":"DownMethod","Common.GloballyQualifiedTypeName":"global::System.Action","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Components.MainCard","Common.TypeNamespace":"HMGMT.Client.Components","Common.TypeNameIdentifier":"MainCard","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-381836742,"Kind":"Components.Component","Name":"HMGMT.Client.App","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.App","Common.TypeNamespace":"HMGMT.Client","Common.TypeNameIdentifier":"App"}},{"HashCode":1534690768,"Kind":"Components.Component","Name":"HMGMT.Client.App","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.App","Common.TypeNamespace":"HMGMT.Client","Common.TypeNameIdentifier":"App","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":993982517,"Kind":"Components.Component","Name":"HMGMT.Client.Shared.MainLayout","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Shared.MainLayout","Common.TypeNamespace":"HMGMT.Client.Shared","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":1988590850,"Kind":"Components.Component","Name":"HMGMT.Client.Shared.MainLayout","AssemblyName":"HMGMT.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HMGMT.Client.Shared.MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"HMGMT.Client.Shared.MainLayout","Common.TypeNamespace":"HMGMT.Client.Shared","Common.TypeNameIdentifier":"MainLayout","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-99617539,"Kind":"Components.ChildContent","Name":"HMGMT.Client.Shared.MainLayout.Body","AssemblyName":"HMGMT.Client","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"HMGMT.Client.Shared.MainLayout.Body","Common.TypeNamespace":"HMGMT.Client.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-845295890,"Kind":"Components.ChildContent","Name":"HMGMT.Client.Shared.MainLayout.Body","AssemblyName":"HMGMT.Client","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"HMGMT.Client.Shared.MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"HMGMT.Client.Shared.MainLayout.Body","Common.TypeNamespace":"HMGMT.Client.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1856072683,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator"}},{"HashCode":-1646701916,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1789588623,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":2087210361,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2063719819,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":113815998,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-916422635,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":1793156627,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2103100738,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True"}},{"HashCode":596078321,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-950800962,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile"}},{"HashCode":-51883978,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":152097514,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True"}},{"HashCode":-899228490,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":247676274,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True"}},{"HashCode":-245082154,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-3486518,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True"}},{"HashCode":-1446222502,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1960512142,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1920215596,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-962036311,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True"}},{"HashCode":1775905808,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-924391862,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1469997211,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":497607057,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1896998253,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":706994615,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1458327790,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1409346984,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True"}},{"HashCode":-539041457,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1642247267,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary"}},{"HashCode":591741979,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1321625040,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate"}},{"HashCode":-1759400738,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1721809178,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-1182313963,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-740824051,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1903137250,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1246271716,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-996503938,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1608831631,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1521540536,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-628269752,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet"}},{"HashCode":1646289862,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2129736942,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":943926180,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1161311501,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2073571043,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1113147290,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":719579976,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-252057281,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-334595117,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":720802434,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1066138983,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1721871958,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True"}},{"HashCode":428134566,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":938082833,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1328007459,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1573826946,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2071423432,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1159723309,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1105006503,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":255509767,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Blazor Message component displays messages with severity by differentiating icons and colors to denote the importance and context of the message to the end user.\n            </summary>\n            <example>\n            The below code example shows Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentAlignment","TypeName":"Syncfusion.Blazor.HorizontalAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the alignment of message content. The available content alignments are Left, Center and Right.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.HorizontalAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.HorizontalAlign.Left\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ContentAlignment","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.HorizontalAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class or multiple classes separated by space that can be appended with the root element of the Message component to customize a message.\n            </summary>\n            <value>\n            The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            The below code example shows border customization of the Message component.\n            <code><![CDATA[\n            <SfMessage CssClass=\"custom\">\n               Conference Room no 01 / Building 135 10:00 AM - 10:30 AM\n            </SfMessage>\n            <style>\n            .custom {\n                border-color: pink;\n            }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Severity","TypeName":"Syncfusion.Blazor.Notifications.MessageSeverity","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the severity of the message, which is used to define the appearance (icons and colors) of the message. The available severity messages are <c>Normal</c>, <c>Info</c>, <c>Success</c>, <c>Warning</c> and <c>Error</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageSeverity\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageSeverity.Normal\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Severity","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageSeverity"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the close icon in the Message component. The end user can click the close icon to hide the message. The <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Closed\" /> event triggered when message closed.\n            </summary>\n            <value>\n            <c>true</c>, the close icon for the Message component is visible at the top right corner of the Message component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the severity icon in the Message component. When set to true, the severity icon is displayed at the left edge of the Message component.\n            This icon will be distinctive based on the <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Severity\" /> property.\n            </summary>\n            <value>\n            <c>false</c> hides the severity icon in the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Syncfusion.Blazor.Notifications.MessageVariant","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the variant from predefined appearance variants to display the content of the Message component. The available variants are <c>Text</c>, <c>Outlined</c> and <c>Filled</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageVariant\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageVariant.Text\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Variant","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageVariant"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility of the Message component. The Message component will be hidden when set to <c>false</c>.\n            </summary>\n            <value>\n            <c>false</c>, hides the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback for the bound Visible property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Message component is closed (hided) successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage"}},{"HashCode":1899396105,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Blazor Message component displays messages with severity by differentiating icons and colors to denote the importance and context of the message to the end user.\n            </summary>\n            <example>\n            The below code example shows Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentAlignment","TypeName":"Syncfusion.Blazor.HorizontalAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the alignment of message content. The available content alignments are Left, Center and Right.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.HorizontalAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.HorizontalAlign.Left\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ContentAlignment","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.HorizontalAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class or multiple classes separated by space that can be appended with the root element of the Message component to customize a message.\n            </summary>\n            <value>\n            The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            The below code example shows border customization of the Message component.\n            <code><![CDATA[\n            <SfMessage CssClass=\"custom\">\n               Conference Room no 01 / Building 135 10:00 AM - 10:30 AM\n            </SfMessage>\n            <style>\n            .custom {\n                border-color: pink;\n            }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Severity","TypeName":"Syncfusion.Blazor.Notifications.MessageSeverity","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the severity of the message, which is used to define the appearance (icons and colors) of the message. The available severity messages are <c>Normal</c>, <c>Info</c>, <c>Success</c>, <c>Warning</c> and <c>Error</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageSeverity\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageSeverity.Normal\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Severity","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageSeverity"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the close icon in the Message component. The end user can click the close icon to hide the message. The <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Closed\" /> event triggered when message closed.\n            </summary>\n            <value>\n            <c>true</c>, the close icon for the Message component is visible at the top right corner of the Message component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the severity icon in the Message component. When set to true, the severity icon is displayed at the left edge of the Message component.\n            This icon will be distinctive based on the <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Severity\" /> property.\n            </summary>\n            <value>\n            <c>false</c> hides the severity icon in the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Syncfusion.Blazor.Notifications.MessageVariant","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the variant from predefined appearance variants to display the content of the Message component. The available variants are <c>Text</c>, <c>Outlined</c> and <c>Filled</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageVariant\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageVariant.Text\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Variant","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageVariant"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility of the Message component. The Message component will be hidden when set to <c>false</c>.\n            </summary>\n            <value>\n            <c>false</c>, hides the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback for the bound Visible property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Message component is closed (hided) successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1405831810,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMessage"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1689790343,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.SfMessage"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1771135541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfSkeleton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Skeleton is a placeholder that animates a shimmer effect to let users know that the page’s content is loading at the moment.\n            In other terms, it simulates the layout of page content while loading the actual content.\n            </summary>\n            <remarks>\n            The `Width` property will be prioritize and used as dimension for Circle and Square <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            </remarks>\n            <example>\n            Skeleton with default text shape.\n            <code><![CDATA[\n            <SfSkeleton Width=\"100%\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with rectangle <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"50px\" Shape=\"SkeletonType.Rectangle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with fade effect <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Effect\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50pt\" Shape=\"SkeletonType.Circle\" Effect=\"ShimmerEffect.Fade\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSkeleton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the width of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The property will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `50px` radius applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the height of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Not required to define this property when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `10px` height applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility state of the Skeleton.\n            </summary>\n            <value>\n            <c>true</c>, if the Skeleton is in visible state; otherwise, <b>false</b>. The default value is <c>true</c>.\n            </value>\n            <example>\n            Skeleton rendered with hidden state.\n            <code>\n            <![CDATA[\n            <SfSkeleton Visible=\"false\" Width=\"50px\" Shape=\"SkeletonType.Square\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Shape","TypeName":"Syncfusion.Blazor.Notifications.SkeletonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the shape of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            </value>\n            <remarks>\n            If the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> is<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" /> or<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Square\" />, the width property value will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is Circle and Square.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Shape","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.SkeletonType"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ShimmerEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the animation effect of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.ShimmerEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.ShimmerEffect.Wave\" />.\n            </value>\n            <example>\n            Skeleton with fade effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Fade\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with pulse effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Pulse\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with no effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.None\" Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ShimmerEffect"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines 'aria-label' for Skeleton accessibility.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Loading...</c>.\n            </value>\n            <example>\n            Skeleton with custom ARIA label.\n            <code>\n            <![CDATA[\n            <SfSkeleton Label=\"Fetching data...\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of Skeleton. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of Skeleton. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below code example, Skeleton background color has been customized by using `CssClass` property.\n            <code>\n            <![CDATA[\n            <SfSkeleton CssClass=\"customize-skeleton\" Width=\"100px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            <style>\n            .e-skeleton.customize-skeleton {\n                background-color:darkgray;\n            }\n            </style>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfSkeleton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfSkeleton"}},{"HashCode":480721895,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfSkeleton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Skeleton is a placeholder that animates a shimmer effect to let users know that the page’s content is loading at the moment.\n            In other terms, it simulates the layout of page content while loading the actual content.\n            </summary>\n            <remarks>\n            The `Width` property will be prioritize and used as dimension for Circle and Square <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            </remarks>\n            <example>\n            Skeleton with default text shape.\n            <code><![CDATA[\n            <SfSkeleton Width=\"100%\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with rectangle <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"50px\" Shape=\"SkeletonType.Rectangle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with fade effect <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Effect\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50pt\" Shape=\"SkeletonType.Circle\" Effect=\"ShimmerEffect.Fade\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfSkeleton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the width of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The property will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `50px` radius applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the height of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Not required to define this property when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `10px` height applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility state of the Skeleton.\n            </summary>\n            <value>\n            <c>true</c>, if the Skeleton is in visible state; otherwise, <b>false</b>. The default value is <c>true</c>.\n            </value>\n            <example>\n            Skeleton rendered with hidden state.\n            <code>\n            <![CDATA[\n            <SfSkeleton Visible=\"false\" Width=\"50px\" Shape=\"SkeletonType.Square\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Shape","TypeName":"Syncfusion.Blazor.Notifications.SkeletonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the shape of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            </value>\n            <remarks>\n            If the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> is<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" /> or<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Square\" />, the width property value will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is Circle and Square.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Shape","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.SkeletonType"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ShimmerEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the animation effect of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.ShimmerEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.ShimmerEffect.Wave\" />.\n            </value>\n            <example>\n            Skeleton with fade effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Fade\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with pulse effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Pulse\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with no effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.None\" Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ShimmerEffect"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines 'aria-label' for Skeleton accessibility.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Loading...</c>.\n            </value>\n            <example>\n            Skeleton with custom ARIA label.\n            <code>\n            <![CDATA[\n            <SfSkeleton Label=\"Fetching data...\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of Skeleton. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of Skeleton. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below code example, Skeleton background color has been customized by using `CssClass` property.\n            <code>\n            <![CDATA[\n            <SfSkeleton CssClass=\"customize-skeleton\" Width=\"100px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            <style>\n            .e-skeleton.customize-skeleton {\n                background-color:darkgray;\n            }\n            </style>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfSkeleton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfSkeleton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":877206038,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the show and hide animation settings of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HideSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when hiding the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}},{"Kind":"Components.Component","Name":"ShowSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when showing the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings"}},{"HashCode":769220406,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the show and hide animation settings of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HideSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when hiding the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}},{"Kind":"Components.Component","Name":"ShowSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when showing the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":915687872,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1214816099,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-649074935,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Provides data to configure the Toast button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Specifies the click event binding of action buttons created within Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `Content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `Disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Notifications.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ButtonType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButton"}},{"HashCode":273616804,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Provides data to configure the Toast button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Specifies the click event binding of action buttons created within Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `Content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `Disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Notifications.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ButtonType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":811462363,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButtons","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Toast buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons"}},{"HashCode":1840995947,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButtons","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Toast buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-480399917,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2065078188,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-509853985,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastEvents","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure the event handlers to handle the events with Toast component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast shown.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired while clicking on the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastCloseArgs>","Documentation":"\n            <summary>\n            Trigger the event after the Toast hides.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event after the Toast shown on the target container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastOpenArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastEvents","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastEvents"}},{"HashCode":1335517955,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastEvents","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure the event handlers to handle the events with Toast component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast shown.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired while clicking on the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastCloseArgs>","Documentation":"\n            <summary>\n            Trigger the event after the Toast hides.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event after the Toast shown on the target container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastOpenArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastEvents","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":815907364,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while hiding the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastHideAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings"}},{"HashCode":-1128889746,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while hiding the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":274350008,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastHideAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1627651119,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1611519026,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastPosition","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configures to display a toast in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastPosition"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's left edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's top edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastPosition","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastPosition"}},{"HashCode":353691544,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastPosition","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configures to display a toast in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastPosition"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's left edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's top edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastPosition","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastPosition","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-47957731,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while showing the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastShowAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings"}},{"HashCode":515731132,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while showing the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-525397702,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastShowAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1969536539,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-267379530,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastTemplates","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates"}},{"HashCode":2053527388,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastTemplates","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1074360606,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-783538539,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1303638264,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Title","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":763530586,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Title","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-700114180,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1951299674,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2097138502,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1859726502,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":594676489,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfToast","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            Accepts selectors, string values and HTML elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExtendedTimeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration after interacting with the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExtendedTimeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toast in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines CSS classes to specify an icon for the Toast which is to be displayed at top left corner of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Icon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NewestOnTop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the newly created Toast message display order while multiple toast's are added to page one after another.\n            By default, newly added Toast will be added after old Toast's.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewestOnTop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ProgressDirection","TypeName":"Syncfusion.Blazor.Notifications.ProgressDirection","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies the direction for the Toast progressBar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ProgressDirection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ProgressDirection"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the close button in Toast message to close the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the progress bar to denote the Toast message display timeout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target container where the Toast to be displayed.\n            Based on the target, the positions such as `Left`, `Top` will be applied to the Toast.\n            The default value is null, which refers the `document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Timeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration on the page in milliseconds.\n            - Once the time expires, Toast message will be removed.\n            - Setting 0 as a time out value displays the Toast on the page until the user closes it manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Timeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the title to be displayed on the Toast.\n            Works only with string values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toast in pixels/numbers/percentage. Number value is considered as pixels.\n            In mobile devices, default width is considered as `100%`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast"}},{"HashCode":-1896055799,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfToast","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            Accepts selectors, string values and HTML elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExtendedTimeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration after interacting with the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExtendedTimeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toast in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines CSS classes to specify an icon for the Toast which is to be displayed at top left corner of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Icon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NewestOnTop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the newly created Toast message display order while multiple toast's are added to page one after another.\n            By default, newly added Toast will be added after old Toast's.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewestOnTop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ProgressDirection","TypeName":"Syncfusion.Blazor.Notifications.ProgressDirection","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies the direction for the Toast progressBar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ProgressDirection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ProgressDirection"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the close button in Toast message to close the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the progress bar to denote the Toast message display timeout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target container where the Toast to be displayed.\n            Based on the target, the positions such as `Left`, `Top` will be applied to the Toast.\n            The default value is null, which refers the `document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Timeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration on the page in milliseconds.\n            - Once the time expires, Toast message will be removed.\n            - Setting 0 as a time out value displays the Toast on the page until the user closes it manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Timeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the title to be displayed on the Toast.\n            Works only with string values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toast in pixels/numbers/percentage. Number value is considered as pixels.\n            In mobile devices, default width is considered as `100%`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1316380981,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1638620630,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Notifications.SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2051907616,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":49707421,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1648424578,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications._Imports","AssemblyName":"Syncfusion.Blazor.Notifications","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1375217861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications._Imports","AssemblyName":"Syncfusion.Blazor.Notifications","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":914546433,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.Internal.ToastContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastContent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.Internal.ToastContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications.Internal","Common.TypeNameIdentifier":"ToastContent"}},{"HashCode":1811074253,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.Internal.ToastContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.Internal.ToastContent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.Internal.ToastContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications.Internal","Common.TypeNameIdentifier":"ToastContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":576606091,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":159163373,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Core._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1552437943,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent"}},{"HashCode":-519296225,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":523134783,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.SyncfusionLicense","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SyncfusionLicense"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.SyncfusionLicense","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"SyncfusionLicense"}},{"HashCode":-733608915,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.SyncfusionLicense","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.SyncfusionLicense"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.SyncfusionLicense","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"SyncfusionLicense","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1052961582,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton"}},{"HashCode":-1577050600,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1128267856,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1565814587,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1762993270,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True"}},{"HashCode":-1928724373,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-917904350,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2032985851,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1134197718,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents"}},{"HashCode":1430655088,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-156991814,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem"}},{"HashCode":1486786275,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":743819622,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":484553617,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1623613924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems"}},{"HashCode":660382126,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1234244864,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1570654682,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":95290879,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":1085585829,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1902515651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":733210451,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1076751214,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab"}},{"HashCode":402628514,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1699136919,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1169218676,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":51799141,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon"}},{"HashCode":-1842198850,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1666515834,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1620203878,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1049385581,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True"}},{"HashCode":-2141917567,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1873767811,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-63037345,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1512425539,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LinearDirection"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialMode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Buttons.SpeedDialItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#arget_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"ItemRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial"}},{"HashCode":-1048471787,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LinearDirection"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialMode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Buttons.SpeedDialItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#arget_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"ItemRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1782490115,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":752483712,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1489255102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1878599344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-262369809,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1597617273,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2082340348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialAnimationSettings"}},{"HashCode":1670841834,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1609397576,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItem"}},{"HashCode":-182662410,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1464359516,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems"}},{"HashCode":1853413101,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1976517494,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":968021877,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":286927570,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.RadialDirection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialRadialSettings"}},{"HashCode":-1876545185,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.RadialDirection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialRadialSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-332695911,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True"}},{"HashCode":240040461,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-638813448,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1888446011,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1142097590,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1134768358,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1924767828,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialItemView"}},{"HashCode":604606887,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialItemView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-815721312,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialPopup"}},{"HashCode":59986681,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialPopup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-570326213,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True"}},{"HashCode":-1427256128,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2019176430,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-99784322,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1963668115,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent"}},{"HashCode":-2015505674,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2014705676,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":-644325477,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2070786262,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1063252289,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-295287261,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView"}},{"HashCode":929523394,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":24364686,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router"}},{"HashCode":-868917091,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":395977800,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1303430697,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1702540883,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-210369553,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1969075404,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1966357993,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-412348275,"Kind":"Components.EventHandler","Name":"onfocus","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocus","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocus"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1183441731,"Kind":"Components.EventHandler","Name":"onblur","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onblur","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onblur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onblur"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1244533523,"Kind":"Components.EventHandler","Name":"onfocusin","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusin","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusin"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1943172950,"Kind":"Components.EventHandler","Name":"onfocusout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1669379088,"Kind":"Components.EventHandler","Name":"onmouseover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":206835795,"Kind":"Components.EventHandler","Name":"onmouseout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1703164961,"Kind":"Components.EventHandler","Name":"onmousemove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousemove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousemove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1539717881,"Kind":"Components.EventHandler","Name":"onmousedown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousedown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousedown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousedown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2037212429,"Kind":"Components.EventHandler","Name":"onmouseup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1076801267,"Kind":"Components.EventHandler","Name":"onclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":884794329,"Kind":"Components.EventHandler","Name":"ondblclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondblclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondblclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondblclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1538615901,"Kind":"Components.EventHandler","Name":"onwheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-383152099,"Kind":"Components.EventHandler","Name":"onmousewheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousewheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousewheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousewheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":583382718,"Kind":"Components.EventHandler","Name":"oncontextmenu","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncontextmenu","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncontextmenu","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncontextmenu"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1496118296,"Kind":"Components.EventHandler","Name":"ondrag","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrag","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrag"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1892667192,"Kind":"Components.EventHandler","Name":"ondragend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-695808398,"Kind":"Components.EventHandler","Name":"ondragenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":881656464,"Kind":"Components.EventHandler","Name":"ondragleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1675311030,"Kind":"Components.EventHandler","Name":"ondragover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1441981659,"Kind":"Components.EventHandler","Name":"ondragstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1321031139,"Kind":"Components.EventHandler","Name":"ondrop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":797422111,"Kind":"Components.EventHandler","Name":"onkeydown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeydown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeydown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeydown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-765211634,"Kind":"Components.EventHandler","Name":"onkeyup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeyup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeyup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeyup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1685080129,"Kind":"Components.EventHandler","Name":"onkeypress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeypress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeypress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":700369429,"Kind":"Components.EventHandler","Name":"onchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-144114499,"Kind":"Components.EventHandler","Name":"oninput","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninput","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninput"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-6567171,"Kind":"Components.EventHandler","Name":"oninvalid","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninvalid","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninvalid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninvalid"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1160189933,"Kind":"Components.EventHandler","Name":"onreset","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreset","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreset","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreset"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-253871031,"Kind":"Components.EventHandler","Name":"onselect","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselect","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselect"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1693382503,"Kind":"Components.EventHandler","Name":"onselectstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1399289399,"Kind":"Components.EventHandler","Name":"onselectionchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectionchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectionchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectionchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1257688159,"Kind":"Components.EventHandler","Name":"onsubmit","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsubmit","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsubmit"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":526616602,"Kind":"Components.EventHandler","Name":"onbeforecopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-704514247,"Kind":"Components.EventHandler","Name":"onbeforecut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1301262964,"Kind":"Components.EventHandler","Name":"onbeforepaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforepaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforepaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforepaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-943806315,"Kind":"Components.EventHandler","Name":"oncopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1024736527,"Kind":"Components.EventHandler","Name":"oncut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1564030866,"Kind":"Components.EventHandler","Name":"onpaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-245678027,"Kind":"Components.EventHandler","Name":"ontouchcancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchcancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchcancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchcancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1303133076,"Kind":"Components.EventHandler","Name":"ontouchend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1167672914,"Kind":"Components.EventHandler","Name":"ontouchmove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchmove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchmove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchmove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1716506156,"Kind":"Components.EventHandler","Name":"ontouchstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1776231308,"Kind":"Components.EventHandler","Name":"ontouchenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-760395158,"Kind":"Components.EventHandler","Name":"ontouchleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":448925539,"Kind":"Components.EventHandler","Name":"ongotpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ongotpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ongotpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1828352982,"Kind":"Components.EventHandler","Name":"onlostpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onlostpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onlostpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-824984604,"Kind":"Components.EventHandler","Name":"onpointercancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointercancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointercancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointercancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":512689634,"Kind":"Components.EventHandler","Name":"onpointerdown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerdown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerdown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerdown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-131639322,"Kind":"Components.EventHandler","Name":"onpointerenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2081055617,"Kind":"Components.EventHandler","Name":"onpointerleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":671343776,"Kind":"Components.EventHandler","Name":"onpointermove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointermove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointermove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointermove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-906399437,"Kind":"Components.EventHandler","Name":"onpointerout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1673358071,"Kind":"Components.EventHandler","Name":"onpointerover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1883012605,"Kind":"Components.EventHandler","Name":"onpointerup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-445196629,"Kind":"Components.EventHandler","Name":"oncanplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1072288228,"Kind":"Components.EventHandler","Name":"oncanplaythrough","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplaythrough","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplaythrough"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":429038913,"Kind":"Components.EventHandler","Name":"oncuechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncuechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncuechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncuechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-857605877,"Kind":"Components.EventHandler","Name":"ondurationchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondurationchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondurationchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondurationchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1023041156,"Kind":"Components.EventHandler","Name":"onemptied","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onemptied","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onemptied","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onemptied"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2113325282,"Kind":"Components.EventHandler","Name":"onpause","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpause","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpause","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpause"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1171829661,"Kind":"Components.EventHandler","Name":"onplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1924423103,"Kind":"Components.EventHandler","Name":"onplaying","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplaying","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplaying","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplaying"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":251218392,"Kind":"Components.EventHandler","Name":"onratechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onratechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onratechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onratechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1200360301,"Kind":"Components.EventHandler","Name":"onseeked","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeked"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":870409781,"Kind":"Components.EventHandler","Name":"onseeking","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeking","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeking"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2005397906,"Kind":"Components.EventHandler","Name":"onstalled","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstalled","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstalled","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstalled"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":148340652,"Kind":"Components.EventHandler","Name":"onstop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":17598829,"Kind":"Components.EventHandler","Name":"onsuspend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsuspend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsuspend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsuspend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1960382636,"Kind":"Components.EventHandler","Name":"ontimeupdate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeupdate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeupdate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeupdate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-901598092,"Kind":"Components.EventHandler","Name":"onvolumechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onvolumechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onvolumechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onvolumechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1685471538,"Kind":"Components.EventHandler","Name":"onwaiting","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwaiting","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwaiting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwaiting"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-623329157,"Kind":"Components.EventHandler","Name":"onloadstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-516077056,"Kind":"Components.EventHandler","Name":"ontimeout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":861748868,"Kind":"Components.EventHandler","Name":"onabort","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onabort","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onabort","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onabort"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1292834145,"Kind":"Components.EventHandler","Name":"onload","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onload","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onload"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-491267811,"Kind":"Components.EventHandler","Name":"onloadend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1274141778,"Kind":"Components.EventHandler","Name":"onprogress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onprogress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onprogress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onprogress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1470710021,"Kind":"Components.EventHandler","Name":"onerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ErrorEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2097203272,"Kind":"Components.EventHandler","Name":"onactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1860614855,"Kind":"Components.EventHandler","Name":"onbeforeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-944834360,"Kind":"Components.EventHandler","Name":"onbeforedeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforedeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforedeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":985382823,"Kind":"Components.EventHandler","Name":"ondeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1227747450,"Kind":"Components.EventHandler","Name":"onended","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onended","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onended","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onended"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1608024556,"Kind":"Components.EventHandler","Name":"onfullscreenchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1492855282,"Kind":"Components.EventHandler","Name":"onfullscreenerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":561974861,"Kind":"Components.EventHandler","Name":"onloadeddata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadeddata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadeddata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadeddata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":143882370,"Kind":"Components.EventHandler","Name":"onloadedmetadata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadedmetadata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadedmetadata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":807609890,"Kind":"Components.EventHandler","Name":"onpointerlockchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":322499480,"Kind":"Components.EventHandler","Name":"onpointerlockerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1310773309,"Kind":"Components.EventHandler","Name":"onreadystatechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreadystatechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreadystatechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreadystatechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1337217167,"Kind":"Components.EventHandler","Name":"onscroll","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onscroll","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onscroll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onscroll"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1918318624,"Kind":"Components.EventHandler","Name":"ontoggle","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontoggle","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontoggle","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontoggle"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-666102522,"Kind":"Components.Splat","Name":"Attributes","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Merges a collection of attributes into the current element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@attributes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Splat","Name":"@attributes","TypeName":"System.Object","Documentation":"Merges a collection of attributes into the current element or component.","Metadata":{"Common.PropertyName":"Attributes","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Splat","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Attributes"}},{"HashCode":-741778581,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@bind-","NameComparison":1,"Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-...","TypeName":"System.Collections.Generic.Dictionary<string, object>","IndexerNamePrefix":"@bind-","IndexerTypeName":"System.Object","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.","Metadata":{"Common.PropertyName":"Event"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.Fallback":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Bind","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"Bind"}},{"HashCode":-189040490,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1162757843,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":2062777026,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_checked"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-checked","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"checked","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"checkbox","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-861373720,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"text","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":2079076239,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":99653148,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1939655790,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-750919372,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1579112193,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1321578152,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1468251761,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1561878625,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1243020112,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-966426193,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1114120702,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1223827150,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-315812076,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":466876804,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1485901516,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":1372560140,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1336727726,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":-1080786927,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1954575237,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":1484008742,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1132491661,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-1751018369,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-137035595,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1749767674,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":721695530,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1204175180,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1341595595,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMessage","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage"}},{"HashCode":-727898206,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfMessage","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":588267345,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":1358260298,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":36784855,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1701292965,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-342836231,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":1705256730,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1966453895,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton"}},{"HashCode":1566363643,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1967491011,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial"}},{"HashCode":1440782934,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1068884355,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch"}},{"HashCode":81384608,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":957713645,"Kind":"Components.Ref","Name":"Ref","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Populates the specified field or property with a reference to the element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ref","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Ref","Name":"@ref","TypeName":"System.Object","Documentation":"Populates the specified field or property with a reference to the element or component.","Metadata":{"Common.PropertyName":"Ref","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Ref","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Ref"}},{"HashCode":-1148481321,"Kind":"Components.Key","Name":"Key","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@key","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Key","Name":"@key","TypeName":"System.Object","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","Metadata":{"Common.PropertyName":"Key","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Key","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Key"}}],"CSharpLanguageVersion":1000},"RootNamespace":"HMGMT.Client","Documents":[{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Components\\MoreButtonGroup.razor","TargetPath":"Components\\MoreButtonGroup.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Pages\\BoilerData.razor","TargetPath":"Pages\\BoilerData.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\_Imports.razor","TargetPath":"_Imports.razor","FileKind":"componentImport"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\App.razor","TargetPath":"App.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Pages\\ThermostatData.razor","TargetPath":"Pages\\ThermostatData.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Pages\\Index.razor","TargetPath":"Pages\\Index.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Pages\\MixerData.razor","TargetPath":"Pages\\MixerData.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Components\\MainCard.razor","TargetPath":"Components\\MainCard.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Shared\\MainLayout.razor","TargetPath":"Shared\\MainLayout.razor","FileKind":"component"},{"FilePath":"D:\\HMGMT\\HMGMT\\Client\\Components\\SwipeCard.razor","TargetPath":"Components\\SwipeCard.razor","FileKind":"component"}],"SerializationFormat":"0.3"}